{
  "$schema": "http://json-schema.org/schema",
  "version": 2,
  "title": "Lambdaform Build executor",
  "description": "",
  "type": "object",
  "properties": {
    "handlers": {
      "type": "array",
      "description": "Used to define the handler build properties. Each Lambda function is represented by a handler.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the handler."
          },
          "path": {
            "type": "string",
            "description": "The path to the file that contains the handler function."
          },
          "assets": {
            "type": "array",
            "description": "List of static assets.",
            "default": [],
            "items": {
              "$ref": "#/definitions/assetPattern"
            }
          },
          "externalDependencies": {
            "oneOf": [
              {
                "type": "string",
                "enum": ["none", "all"]
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Dependencies to keep external to the bundle. ('none' (default), 'all', or an array of regular expressions that match node module names)",
            "default": "none"
          },
          "excludeAwsSdk": {
            "type": "boolean",
            "description": "Should the AWS SDK be excluded? The SDK is part of the Lambda runtime. Set this option to false, if a different SDK version is needed. (https://docs.aws.amazon.com/lambda/latest/dg/lambda-nodejs.html)",
            "default": true
          }
        },
        "required": ["name", "path"],
        "additionalProperties": false
      }
    },
    "tsConfig": {
      "type": "string",
      "description": "File path of the TypeScript configuration."
    },
    "outputPath": {
      "type": "string",
      "description": "The output path of the generated files."
    },
    "outputFileName": {
      "type": "string",
      "description": "Name of the handler output file.",
      "default": "index.mjs"
    },
    "outputChunkNames": {
      "type": "string",
      "description": "Name of the handler chunk files that are generated during the build.",
      "default": "lib/[name].mjs"
    },
    "excludeZipRegExp": {
      "type": "string",
      "description": "Regular expression that defines which contents should be excluded from the handler ZIP file. Remove the option if you don't want to use filtering."
    },
    "format": {
      "enum": ["commonjs", "module"],
      "description": "Defines the Rollup format option. (https://rollupjs.org/configuration-options/#output-format)",
      "default": "module"
    },
    "packageJsonType": {
      "enum": ["commonjs", "module"],
      "description": "The package.json 'type' field defines how Node.js should interpret .js files. (https://nodejs.org/api/packages.html#packagejson-and-file-extensions)",
      "default": "commonjs"
    },
    "sourcemap": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "enum": ["inline", "hidden"]
        }
      ],
      "description": "Defines the Rollup sourcemap option. (https://rollupjs.org/configuration-options/#output-sourcemap)",
      "default": "hidden"
    },
    "treeshake": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "enum": ["smallest", "recommended", "safest"]
        }
      ],
      "description": "Defines the Rollup treeshake option. Use the 'rollupConfig' option, if more control over the tree shaking process is needed. (https://rollupjs.org/configuration-options/#treeshake)",
      "default": "smallest"
    },
    "deleteOutputPath": {
      "type": "boolean",
      "description": "Delete the output path before building.",
      "default": true
    },
    "verbose": {
      "type": "boolean",
      "description": "Emits verbose output.",
      "default": false
    }
  },
  "required": ["handlers", "tsConfig", "outputPath"],
  "additionalProperties": false,
  "definitions": {
    "assetPattern": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "glob": {
              "type": "string",
              "description": "The pattern to match."
            },
            "input": {
              "type": "string",
              "description": "The input directory path in which to apply `glob`. Defaults to the workspace root."
            },
            "output": {
              "type": "string",
              "description": "Relative path within the output folder."
            }
          },
          "required": ["glob", "input", "output"],
          "additionalProperties": false
        },
        {
          "type": "string"
        }
      ]
    }
  }
}
