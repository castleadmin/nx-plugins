{
  "$schema": "http://json-schema.org/schema",
  "version": 2,
  "title": "Lambdaform Build executor",
  "description": "",
  "type": "object",
  "properties": {
    "handlers": {
      "type": "array",
      "description": "Used to define the handler build properties. Each Lambda function is represented by a handler.",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Defines the name of the handler."
          },
          "main": {
            "type": "string",
            "description": "Defines the path of the source code file that contains the handler function."
          },
          "assets": {
            "type": "array",
            "description": "List of static assets that are bundled with the handler function.",
            "default": [],
            "items": {
              "$ref": "#/definitions/assetPattern"
            }
          }
        },
        "required": ["name", "main"],
        "additionalProperties": false
      }
    },
    "tsConfig": {
      "type": "string",
      "description": "Defines the file path of the TypeScript configuration."
    },
    "pack": {
      "type": "string",
      "enum": ["separately", "together"],
      "description": "The handler functions could be packed into separate bundles (default) or into a single bundle.",
      "default": "separately"
    },
    "format": {
      "enum": ["commonjs", "module"],
      "description": "Defines the Rollup 'format' option. (https://rollupjs.org/configuration-options/#output-format)",
      "default": "module"
    },
    "packageJsonType": {
      "enum": ["commonjs", "module"],
      "description": "The package.json 'type' field defines how Node.js should interpret '*.js' files. (https://nodejs.org/api/packages.html#packagejson-and-file-extensions)",
      "default": "commonjs"
    },
    "outputPath": {
      "type": "string",
      "description": "Defines the output path of the generated files."
    },
    "output": {
      "oneOf": [
        {
          "$ref": "#/definitions/zipOutput"
        }
      ],
      "description": "Defines the output type of the bundles."
    },
    "entryFileNames": {
      "type": "string",
      "description": "Defines the Rollup 'entryFileNames' option. (https://rollupjs.org/configuration-options/#output-entryfilenames)",
      "pattern": "^.*\\[name\\].*$"
    },
    "chunkFileNames": {
      "type": "string",
      "description": "Defines the Rollup 'chunkFileNames' option. (https://rollupjs.org/configuration-options/#output-chunkfilenames)"
    },
    "sourceMap": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "enum": ["inline", "hidden"]
        }
      ],
      "description": "Defines the Rollup 'sourcemap' option. (https://rollupjs.org/configuration-options/#output-sourcemap)",
      "default": "hidden"
    },
    "sourceMapExcludeSources": {
      "type": "boolean",
      "description": "Defines the Rollup 'sourcemapExcludeSources' option. (https://rollupjs.org/configuration-options/#output-sourcemapexcludesources)",
      "default": false
    },
    "sourceMapBaseUrl": {
      "type": "string",
      "description": "Defines the Rollup 'sourcemapBaseUrl' option. (https://rollupjs.org/configuration-options/#output-sourcemapbaseurl)"
    },
    "sourceMapPathTransform": {
      "enum": ["relative", "absolute", "repository"],
      "description": "The source map 'sources' property contains paths that are 'relative', 'absolute' (useful for local debugging) or paths from the repository root (useful if combined with the 'sourcemapBaseUrl' option).",
      "default": "absolute"
    },
    "treeshake": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "enum": ["smallest", "recommended", "safest"]
        }
      ],
      "description": "Defines the Rollup 'treeshake' option. Use the 'rollupConfig' option, if more control over the tree shaking process is needed. (https://rollupjs.org/configuration-options/#treeshake)",
      "default": "smallest"
    },
    "minify": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "additionalProperties": true
        }
      ],
      "description": "Minify the bundle with terser. Accepts a boolean or a terser options object. (https://github.com/terser/terser#minify-options)",
      "default": false
    },
    "externalDependencies": {
      "oneOf": [
        {
          "type": "string",
          "enum": ["none", "all"]
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "description": "Defines the dependencies that are kept external to the bundle. ('none' (default), 'all', or an array of regular expressions that define the external node modules)",
      "default": "none"
    },
    "excludeAwsSdk": {
      "type": "boolean",
      "description": "Should the AWS SDK be excluded? The AWS SDK is part of the Lambda runtime. Set this option to false, if a different SDK version is needed. (https://docs.aws.amazon.com/lambda/latest/dg/lambda-nodejs.html)",
      "default": true
    },
    "rollupConfig": {
      "type": "string",
      "description": "Path to a ES module (.mjs) file with a function as default export that modifies or replaces a given rollup configuration. The function should fulfill the following signature: rollupConfig(rollupOptions: RollupOptions, options: BuildExecutorSchema, context: ExecutorContext): Promise<RollupOptions>"
    },
    "deleteOutputPath": {
      "type": "boolean",
      "description": "Delete the output path before building.",
      "default": true
    },
    "verbose": {
      "type": "boolean",
      "description": "Emits verbose output.",
      "default": false
    },
    "watch": {
      "type": "boolean",
      "description": "Enable re-building when files change.",
      "default": false
    }
  },
  "required": [
    "handlers",
    "tsConfig",
    "outputPath",
    "output",
    "entryFileNames",
    "chunkFileNames"
  ],
  "additionalProperties": false,
  "definitions": {
    "assetPattern": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "glob": {
              "type": "string",
              "description": "Defines the input file pattern."
            },
            "input": {
              "type": "string",
              "description": "The input directory path in which to apply `glob`. Defaults to the workspace root."
            },
            "output": {
              "type": "string",
              "description": "Defines the relative path within the output directory."
            }
          },
          "required": ["glob", "input", "output"],
          "additionalProperties": false
        },
        {
          "type": "string"
        }
      ]
    },
    "zipOutput": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["zip"],
          "description": "Defines that the handlers should be packed as ZIP files."
        },
        "zipFileNames": {
          "type": "string",
          "description": "Defines the name of the handler ZIP files. [name] could be used as a placeholder. It will be replaced with the handler name, if the handlers are packed separately or with the project name, if the handlers are packed together.",
          "default": "[name].zip"
        },
        "excludeZipRegExp": {
          "type": "string",
          "description": "Regular expression that defines which files should be excluded from the handler ZIP file. Remove this option, if you don't want to exclude any files."
        }
      },
      "required": ["type"],
      "additionalProperties": false
    }
  }
}
