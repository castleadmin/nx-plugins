import { App, Tags } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import 'source-map-support/register';
import { Environment } from './environment';
import { ExampleStack, ExampleStackProps } from './example-stack';

export const createApp = (): App => {
  const app = new App();
  const serviceName = '<%= appName %>';

  new EnvironmentStacks(app, 'Dev', {
    environment: Environment.Dev,
    serviceName,
    env: {
      account:
        process.env['CDK_DEV_ACCOUNT'] ??
        process.env['CDK_DEFAULT_ACCOUNT'] ??
        'not-available',
      region:
        process.env['CDK_DEV_REGION'] ??
        process.env['CDK_DEFAULT_REGION'] ??
        'not-available',
    },
  });

  new EnvironmentStacks(app, 'Stage', {
    environment: Environment.Stage,
    serviceName,
    env: {
      account:
        process.env['CDK_STAGE_ACCOUNT'] ??
        process.env['CDK_DEFAULT_ACCOUNT'] ??
        'not-available',
      region:
        process.env['CDK_STAGE_REGION'] ??
        process.env['CDK_DEFAULT_REGION'] ??
        'not-available',
    },
  });

  new EnvironmentStacks(app, 'Prod', {
    environment: Environment.Prod,
    serviceName,
    env: {
      account:
        process.env['CDK_PROD_ACCOUNT'] ??
        process.env['CDK_DEFAULT_ACCOUNT'] ??
        'not-available',
      region:
        process.env['CDK_PROD_REGION'] ??
        process.env['CDK_DEFAULT_REGION'] ??
        'not-available',
    },
  });

  return app;
};

export interface EnvironmentStacksProps extends ExampleStackProps {
  environment: Environment;
  serviceName: string;
}

export class EnvironmentStacks extends Construct {
  constructor(scope: Construct, id: string, props: EnvironmentStacksProps) {
    const { environment, serviceName, ...stackProps } = props;

    super(scope, id);

    const exampleStack = new ExampleStack(this, 'ExampleStack', stackProps);

    Tags.of(exampleStack).add('Environment', environment);
    Tags.of(exampleStack).add('App', serviceName);
  }
}

createApp();
