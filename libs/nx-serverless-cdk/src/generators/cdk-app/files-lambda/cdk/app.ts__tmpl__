import { App, Tags } from 'aws-cdk-lib';
import { SourceMapMode } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Construct } from 'constructs';
import { resolve } from 'node:path';
import 'source-map-support/register';
import { Environment } from '../shared/environment';
import { ExampleStack, ExampleStackProps } from './example-stack';

export const createApp = (): App => {
  const app = new App();
  const serviceName = '<%= appName %>';

  new EnvironmentStacks(app, 'Dev', {
    environment: Environment.Dev,
    serviceName,
    env: {
      account:
        process.env['CDK_DEV_ACCOUNT'] ??
        process.env['CDK_DEFAULT_ACCOUNT'] ??
        'not-available',
      region:
        process.env['CDK_DEV_REGION'] ??
        process.env['CDK_DEFAULT_REGION'] ??
        'not-available',
    },
    build: {
      minify: false,
      sourceMapMode: SourceMapMode.INLINE,
      tsconfig: resolve(__dirname, '../tsconfig.app.json'),
    },
  });

  new EnvironmentStacks(app, 'Stage', {
    environment: Environment.Stage,
    serviceName,
    env: {
      account:
        process.env['CDK_STAGE_ACCOUNT'] ??
        process.env['CDK_DEFAULT_ACCOUNT'] ??
        'not-available',
      region:
        process.env['CDK_STAGE_REGION'] ??
        process.env['CDK_DEFAULT_REGION'] ??
        'not-available',
    },
    build: {
      minify: true,
      /*
        Source maps bloat the Lambda bundle, which leads to longer cold start times.
        Therefore, it is preferable to
        1. Run the 'cdk synth' command.
        2. Upload the source maps to an error monitoring tool like Sentry.
        3. Remove the source maps.
        4. Run the 'cdk deploy --app cdk.out' command to skip the synthesize step during the deployment.
       */
      sourceMapMode: SourceMapMode.EXTERNAL,
      tsconfig: resolve(__dirname, '../tsconfig.app.json'),
    },
  });

  new EnvironmentStacks(app, 'Prod', {
    environment: Environment.Prod,
    serviceName,
    env: {
      account:
        process.env['CDK_PROD_ACCOUNT'] ??
        process.env['CDK_DEFAULT_ACCOUNT'] ??
        'not-available',
      region:
        process.env['CDK_PROD_REGION'] ??
        process.env['CDK_DEFAULT_REGION'] ??
        'not-available',
    },
    build: {
      minify: true,
      /*
        Source maps bloat the Lambda bundle, which leads to longer cold start times.
        Therefore, it is preferable to
        1. Run the 'cdk synth' command.
        2. Upload the source maps to an error monitoring tool like Sentry.
        3. Remove the source maps.
        4. Run the 'cdk deploy --app cdk.out' command to skip the synthesize step during the deployment.
       */
      sourceMapMode: SourceMapMode.EXTERNAL,
      tsconfig: resolve(__dirname, '../tsconfig.app.json'),
    },
  });

  return app;
};

export type EnvironmentStacksProps = ExampleStackProps;

export class EnvironmentStacks extends Construct {
  constructor(scope: Construct, id: string, props: EnvironmentStacksProps) {
    const { environment, serviceName } = props;

    super(scope, id);

    const exampleStack = new ExampleStack(this, 'ExampleStack', props);

    Tags.of(exampleStack).add('Environment', environment);
    Tags.of(exampleStack).add('App', serviceName);
  }
}

createApp();
