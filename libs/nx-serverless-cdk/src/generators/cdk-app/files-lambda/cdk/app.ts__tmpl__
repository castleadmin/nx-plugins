import { App } from 'aws-cdk-lib';
import { SourceMapMode } from 'aws-cdk-lib/aws-lambda-nodejs';
import { resolve } from 'node:path';
import 'source-map-support/register';
import { Environment } from '../shared/environment';
import { ExampleStack } from './example-stack';

export const createApp = (): App => {
  const app = new App();
  const serviceName = '<%= appName %>';

  createDevEnvironmentStacks(app, serviceName);
  createStageEnvironmentStacks(app, serviceName);
  createProdEnvironmentStacks(app, serviceName);

  return app;
};

/**
 * Create and configure the stacks of the development environment.
 */
const createDevEnvironmentStacks = (app: App, serviceName: string) => {
  const devStack = new ExampleStack(app, 'DevExampleStack', {
    env: {
      account: process.env['CDK_DEV_ACCOUNT'] ?? process.env['CDK_DEFAULT_ACCOUNT'],
      region: process.env['CDK_DEV_REGION'] ?? process.env['CDK_DEFAULT_REGION'],
    },
    build: {
      minify: false,
      sourceMapMode: SourceMapMode.DEFAULT,
      tsconfig: resolve(__dirname, '../tsconfig.app.json'),
    },
  });

  Tags.of(devStack).add('Environment', Environment.Dev);
  Tags.of(devStack).add('App', serviceName);
};

/**
 * Create and configure the stacks of the stage environment.
 */
const createStageEnvironmentStacks = (app: App, serviceName: string) => {
  const stageStack = new ExampleStack(app, 'StageExampleStack', {
    env: {
      account: process.env['CDK_STAGE_ACCOUNT'] ?? process.env['CDK_DEFAULT_ACCOUNT'],
      region: process.env['CDK_STAGE_REGION'] ?? process.env['CDK_DEFAULT_REGION'],
    },
    build: {
      minify: true,
      sourceMapMode: SourceMapMode.EXTERNAL,
      tsconfig: resolve(__dirname, '../tsconfig.app.json'),
    },
  });

  Tags.of(stageStack).add('Environment', Environment.Stage);
  Tags.of(stageStack).add('App', serviceName);
};

/**
 * Create and configure the stacks of the production environment.
 */
const createProdEnvironmentStacks = (app: App, serviceName: string) => {
  const prodStack = new ExampleStack(app, 'ProdExampleStack', {
    env: {
      account: process.env['CDK_PROD_ACCOUNT'] ?? process.env['CDK_DEFAULT_ACCOUNT'],
      region: process.env['CDK_PROD_REGION'] ?? process.env['CDK_DEFAULT_REGION'],
    },
    build: {
      minify: true,
      sourceMapMode: SourceMapMode.EXTERNAL,
      tsconfig: resolve(__dirname, '../tsconfig.app.json'),
    },
  });

  Tags.of(prodStack).add('Environment', Environment.Prod);
  Tags.of(prodStack).add('App', serviceName);
};

createApp();
