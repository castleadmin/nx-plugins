import {
  DeleteMessageCommand,
  ReceiveMessageCommand,
  SQSClient,
  SendMessageCommand,
} from '@aws-sdk/client-sqs';
import { GetParameterCommand, SSMClient } from '@aws-sdk/client-ssm';
import { fromSSO } from '@aws-sdk/credential-providers';
import { Environment, getProfile, getRegion } from './environment';
import { infoSdkLogger } from './sdk-logger';

describe('Receive message', () => {
  let environment: Environment;
  let profile: string;
  let region: string;
  let sqsClient: SQSClient;
  let queueUrl: string;

  beforeEach(async () => {
    environment = process.env['E2E_ENVIRONMENT'] as Environment;
    profile = getProfile(environment);
    region = getRegion(environment);

    const ssmClient = new SSMClient({
      credentials: fromSSO({
        profile,
      }),
      region,
      logger: infoSdkLogger,
      maxAttempts: 3,
    });
    sqsClient = new SQSClient({
      credentials: fromSSO({
        profile,
      }),
      region,
      logger: infoSdkLogger,
      maxAttempts: 3,
    });

    queueUrl =
      (
        await ssmClient.send(
          new GetParameterCommand({
            Name: `/e2e/${environment}/<%= toValidSsmParameterName(`${project.slice(0, 1).toUpperCase()}${project.slice(1)}`).replace(/\//g, '--') %>/ExampleQueue/url`,
          }),
        )
      ).Parameter?.Value ?? '';
  });

  describe('Given an example queue and a message,', () => {
    let message: string;

    beforeEach(async () => {
      message = JSON.stringify({
        a: 5,
        b: 12,
      });
    });

    test('the message should be sent to the queue and received from it.', async () => {
      await sqsClient.send(
        new SendMessageCommand({
          QueueUrl: queueUrl,
          MessageBody: message,
        }),
      );
      const response = await sqsClient.send(
        new ReceiveMessageCommand({
          QueueUrl: queueUrl,
          WaitTimeSeconds: 1,
        }),
      );
      if (response.Messages?.[0]?.ReceiptHandle) {
        await sqsClient.send(
          new DeleteMessageCommand({
            QueueUrl: queueUrl,
            ReceiptHandle: response.Messages?.[0]?.ReceiptHandle,
          }),
        );
      }

      expect(response.Messages?.length).toBe(1);
      expect(response.Messages?.[0]?.Body).toBe(message);
    });
  });
});
